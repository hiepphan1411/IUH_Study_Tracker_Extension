/* eslint-disable no-undef */

function GradesPageContent({ keyValue }) {
  const [gradesData, setGradesData] = React.useState(null);
  const [isLoading, setIsLoading] = React.useState(false);
  const [error, setError] = React.useState(null);
  const [subjectTypes, setSubjectTypes] = React.useState({}); // L∆∞u tr·ªØ lo·∫°i m√¥n h·ªçc ƒë√£ ch·ªçn
  const [openDropdowns, setOpenDropdowns] = React.useState({}); // L∆∞u tr·ªØ tr·∫°ng th√°i m·ªü/ƒë√≥ng c·ªßa c√°c dropdown
  const [curriculumLoaded, setCurriculumLoaded] = React.useState(false);
  const [manuallyChangedSubjects, setManuallyChangedSubjects] = React.useState(
    {}
  ); // Theo d√µi m√¥n n√†o ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th·ªß c√¥ng

  // Load curriculum data first
  React.useEffect(() => {
    const loadCurriculumData = () => {
      chrome.storage.local.get(["curriculum_json"], function (result) {
        if (chrome.runtime.lastError) {
          console.error(
            "L·ªói l·∫•y d·ªØ li·ªáu ch∆∞∆°ng tr√¨nh khung:",
            chrome.runtime.lastError
          );
          setCurriculumLoaded(true); // Still allow the component to work
          return;
        }

        if (result.curriculum_json) {
          try {
            const curriculumDataParsed = JSON.parse(result.curriculum_json);

            // Export curriculum data to window
            window.curriculumData = curriculumDataParsed;

            // Export getCurriculumInfo function
            window.getCurriculumInfo = (subjectName) => {
              if (
                !curriculumDataParsed ||
                !Array.isArray(curriculumDataParsed)
              ) {
                return { soTLT: null, soTTH: null };
              }

              // Normalize subject name for better matching
              const normalizeSubjectName = (name) => {
                return name
                  .toLowerCase()
                  .trim()
                  .replace(/\s+/g, " ") // Replace multiple spaces with single space
                  .replace(/\*/g, "") // Remove asterisk
                  .replace(/[()]/g, "") // Remove parentheses
                  .replace(/[.,;:]/g, "") // Remove punctuation
                  .trim();
              };

              // Calculate string similarity using Levenshtein distance
              const calculateStringSimilarity = (str1, str2) => {
                const len1 = str1.length;
                const len2 = str2.length;
                const matrix = Array(len2 + 1)
                  .fill(null)
                  .map(() => Array(len1 + 1).fill(null));

                for (let i = 0; i <= len1; i++) matrix[0][i] = i;
                for (let j = 0; j <= len2; j++) matrix[j][0] = j;

                for (let j = 1; j <= len2; j++) {
                  for (let i = 1; i <= len1; i++) {
                    const cost = str1[i - 1] === str2[j - 1] ? 0 : 1;
                    matrix[j][i] = Math.min(
                      matrix[j - 1][i] + 1, // deletion
                      matrix[j][i - 1] + 1, // insertion
                      matrix[j - 1][i - 1] + cost // substitution
                    );
                  }
                }

                const distance = matrix[len2][len1];
                const maxLength = Math.max(len1, len2);
                return maxLength === 0 ? 1 : (maxLength - distance) / maxLength;
              };

              const searchName = normalizeSubjectName(subjectName);

              let bestMatch = null;
              let bestSimilarity = 0;

              for (const semester of curriculumDataParsed) {
                if (semester.monHoc && Array.isArray(semester.monHoc)) {
                  for (const subject of semester.monHoc) {
                    const subjectNameInCurriculum =
                      subject.tenMon ||
                      subject["T√™n m√¥n h·ªçc"] ||
                      subject.tenMonHoc ||
                      subject.name;

                    if (subjectNameInCurriculum) {
                      const curriculumName = normalizeSubjectName(
                        subjectNameInCurriculum
                      );

                      // Exact match - highest priority
                      if (curriculumName === searchName) {
                        const soTLT =
                          subject.soTLT || subject["S·ªë TCTL"] || null;
                        const soTTH =
                          subject.soTTH || subject["S·ªë TCTH"] || null;
                        return {
                          soTLT: soTLT ? parseInt(soTLT) : null,
                          soTTH: soTTH ? parseInt(soTTH) : null,
                        };
                      }

                      // Enhanced matching for Ti·∫øng Anh subjects
                      if (
                        searchName.includes("ti·∫øng anh") &&
                        curriculumName.includes("ti·∫øng anh")
                      ) {
                        // Ph√¢n bi·ªát r√µ r√†ng gi·ªØa "Ti·∫øng Anh 1/2" v√† "Ch·ª©ng ch·ªâ Ti·∫øng Anh"
                        const searchHasNumber = /ti·∫øng anh\s+\d+/.test(
                          searchName
                        );
                        const curriculumHasNumber = /ti·∫øng anh\s+\d+/.test(
                          curriculumName
                        );
                        const searchIsCertificate =
                          searchName.includes("ch·ª©ng ch·ªâ");
                        const curriculumIsCertificate =
                          curriculumName.includes("ch·ª©ng ch·ªâ");

                        console.log(
                          `  üîç Ti·∫øng Anh analysis - Search: "${searchName}" (hasNumber: ${searchHasNumber}, isCert: ${searchIsCertificate}), Curriculum: "${curriculumName}" (hasNumber: ${curriculumHasNumber}, isCert: ${curriculumIsCertificate})`
                        );
                        // N·∫øu c·∫£ hai ƒë·ªÅu c√≥ s·ªë (Ti·∫øng Anh 1, Ti·∫øng Anh 2)
                        if (searchHasNumber && curriculumHasNumber) {
                          const searchNumber =
                            searchName.match(/ti·∫øng anh\s+(\d+)/);
                          const curriculumNumber =
                            curriculumName.match(/ti·∫øng anh\s+(\d+)/);

                          if (
                            searchNumber &&
                            curriculumNumber &&
                            searchNumber[1] === curriculumNumber[1]
                          ) {
                            console.log(
                              `  ‚úÖ Ti·∫øng Anh ${searchNumber[1]} exact match found!`
                            );
                            const soTLT =
                              subject.soTLT || subject["S·ªë TCTL"] || null;
                            const soTTH =
                              subject.soTTH || subject["S·ªë TCTH"] || null;
                            return {
                              soTLT: soTLT ? parseInt(soTLT) : null,
                              soTTH: soTTH ? parseInt(soTTH) : null,
                            };
                          } else {
                            console.log(
                              `  ‚ùå Number mismatch: search=${searchNumber?.[1]} vs curriculum=${curriculumNumber?.[1]}`
                            );
                          }
                        }

                        // N·∫øu c·∫£ hai ƒë·ªÅu l√† ch·ª©ng ch·ªâ
                        if (searchIsCertificate && curriculumIsCertificate) {
                          console.log(`  ‚úÖ Ch·ª©ng ch·ªâ Ti·∫øng Anh match found!`);
                          const soTLT =
                            subject.soTLT || subject["S·ªë TCTL"] || null;
                          const soTTH =
                            subject.soTTH || subject["S·ªë TCTH"] || null;
                          return {
                            soTLT: soTLT ? parseInt(soTLT) : null,
                            soTTH: soTTH ? parseInt(soTTH) : null,
                          };
                        }

                        // Kh√¥ng cho match gi·ªØa "Ti·∫øng Anh 1/2" v√† "Ch·ª©ng ch·ªâ Ti·∫øng Anh"
                        if (
                          (searchHasNumber && curriculumIsCertificate) ||
                          (searchIsCertificate && curriculumHasNumber)
                        ) {
                          console.log(
                            `  ‚ùå Skipping cross-match between numbered and certificate Ti·∫øng Anh`
                          );
                          continue;
                        }

                        // Skip any other Ti·∫øng Anh matching to avoid confusion
                        console.log(
                          `  ‚ùå Skipping other Ti·∫øng Anh matching to avoid confusion`
                        );
                        continue;
                      } // Partial matching
                      if (
                        curriculumName.includes(searchName) ||
                        searchName.includes(curriculumName)
                      ) {
                        const similarity = calculateStringSimilarity(
                          searchName,
                          curriculumName
                        );

                        if (similarity > bestSimilarity) {
                          bestSimilarity = similarity;
                          bestMatch = subject;
                        }
                      }

                      // Similarity matching with threshold
                      const similarity = calculateStringSimilarity(
                        searchName,
                        curriculumName
                      );
                      if (similarity > 0.8 && similarity > bestSimilarity) {
                        bestSimilarity = similarity;
                        bestMatch = subject;
                      }

                      // Special handling for common variations (kh√¥ng bao g·ªìm ti·∫øng anh v√¨ ƒë√£ x·ª≠ l√Ω ri√™ng)
                      const specialMatches = [
                        [
                          "gi√°o d·ª•c qu·ªëc ph√≤ng",
                          "gi√°o d·ª•c qu·ªëc ph√≤ng v√† an ninh",
                        ],
                        ["gi√°o d·ª•c th·ªÉ ch·∫•t", "gi√°o d·ª•c th·ªÉ ch·∫•t"],
                        ["nh·∫≠p m√¥n tin h·ªçc", "nh·∫≠p m√¥n tin h·ªçc"],
                      ];
                      for (const [pattern1, pattern2] of specialMatches) {
                        if (
                          (curriculumName.includes(pattern1) &&
                            searchName.includes(pattern1)) ||
                          (curriculumName.includes(pattern2) &&
                            searchName.includes(pattern2))
                        ) {
                          const soTLT =
                            subject.soTLT || subject["S·ªë TCTL"] || null;
                          const soTTH =
                            subject.soTTH || subject["S·ªë TCTH"] || null;
                          return {
                            soTLT: soTLT ? parseInt(soTLT) : null,
                            soTTH: soTTH ? parseInt(soTTH) : null,
                          };
                        }
                      }
                    }
                  }
                }
              }

              // Return best match if found with good similarity
              if (bestMatch && bestSimilarity > 0.7) {
                const soTLT = bestMatch.soTLT || bestMatch["S·ªë TCTL"] || null;
                const soTTH = bestMatch.soTTH || bestMatch["S·ªë TCTH"] || null;
                return {
                  soTLT: soTLT ? parseInt(soTLT) : null,
                  soTTH: soTTH ? parseInt(soTTH) : null,
                };
              }

              // Only show warning for subjects that are not in the ignore list
              const ignoreWarnings = [
                "gi√°o d·ª•c qu·ªëc ph√≤ng",
                "gi√°o d·ª•c th·ªÉ ch·∫•t",
                "ti·∫øng anh",
                "ch·ª©ng ch·ªâ ti·∫øng anh",
              ];

              const shouldIgnoreWarning = ignoreWarnings.some((ignore) =>
                subjectName.toLowerCase().includes(ignore)
              );

              if (!shouldIgnoreWarning) {
                console.warn(`No curriculum info found for "${subjectName}"`);
              }

              return { soTLT: null, soTTH: null };
            };
            console.log("Curriculum data loaded in GradesPageContent");
            setCurriculumLoaded(true);
          } catch (error) {
            console.error("L·ªói parse curriculum data:", error);
            setCurriculumLoaded(true);
          }
        } else {
          console.log("Kh√¥ng c√≥ d·ªØ li·ªáu ch∆∞∆°ng tr√¨nh khung trong storage");
          setCurriculumLoaded(true);
        }
      });
    };

    loadCurriculumData();
  }, []);

  // Auto-classify subjects when both curriculum and grades data are ready
  React.useEffect(() => {
    if (curriculumLoaded && gradesData) {
      // console.log('Both curriculum and grades data ready, starting auto-classification...');
      const newSubjectTypes = {};

      gradesData.semesters.forEach((semester, semesterIndex) => {
        semester.subjects.forEach((subject, subjectIndex) => {
          const key = `${semesterIndex}-${subjectIndex}`;

          // Ch·ªâ auto-classify nh·ªØng m√¥n ch∆∞a ƒë∆∞·ª£c thay ƒë·ªïi th·ªß c√¥ng
          if (!manuallyChangedSubjects[key]) {
            const autoType = getAutoSubjectType(subject.name, subject);
            // console.log(`Auto-classifying "${subject.name}" as: ${autoType}`);
            newSubjectTypes[key] = autoType;
          } else {
            // Gi·ªØ nguy√™n l·ª±a ch·ªçn th·ªß c√¥ng c·ªßa ng∆∞·ªùi d√πng
            newSubjectTypes[key] = subjectTypes[key];
            // console.log(`Keeping manual selection for "${subject.name}": ${subjectTypes[key]}`);
          }
        });
      });

      setSubjectTypes(newSubjectTypes);
      // console.log('Auto-classification completed for real data:', newSubjectTypes);
    }
  }, [curriculumLoaded, gradesData, manuallyChangedSubjects]);

  // Danh s√°ch m√¥n b·ªè qua khi t√≠nh GPA
  const listSubjectIgnoresCalcScore = [
    "gi√°o d·ª•c th·ªÉ ch·∫•t 1",
    "gi√°o d·ª•c th·ªÉ ch·∫•t 2",
    "gi√°o d·ª•c qu·ªëc ph√≤ng v√† an ninh 1",
    "gi√°o d·ª•c qu·ªëc ph√≤ng v√† an ninh 2",
    "ti·∫øng anh 1",
    "ti·∫øng anh 2",
  ];

  React.useEffect(() => {
    loadGradesFromStorage();
  }, [keyValue]);

  // Close all dropdowns when clicking outside
  React.useEffect(() => {
    const handleClickOutside = (event) => {
      if (!event.target.closest(".custom-dropdown")) {
        setOpenDropdowns({});
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  // H√†m l√†m tr√≤n ƒëi·ªÉm theo quy t·∫Øc IUH
  const roundScoreIUH = (score) => {
    if (score === null || score === undefined || isNaN(score)) return null;

    // Validate range 0-10
    if (score < 0) return 0;
    if (score > 10) return 10;

    const integerPart = Math.floor(score);
    const decimalPart = score - integerPart;

    if (decimalPart < 0.25) {
      return integerPart;
    } else if (decimalPart < 0.75) {
      return integerPart + 0.5;
    } else {
      return integerPart + 1.0;
    }
  };

  // H√†m validate ƒëi·ªÉm ƒë·∫ßu v√†o
  const validateScore = (value) => {
    if (value === "" || value === null || value === undefined) {
      return { isValid: true, value: null };
    }

    // Convert Vietnamese decimal format to JS format
    const normalizedValue = value.toString().replace(",", ".");
    const numValue = parseFloat(normalizedValue);

    // Check if it's a valid number
    if (isNaN(numValue)) {
      return { isValid: false, value: null, error: "ƒêi·ªÉm ph·∫£i l√† s·ªë" };
    }

    // Check range 0-10
    if (numValue < 0 || numValue > 10) {
      return { isValid: false, value: null, error: "ƒêi·ªÉm ph·∫£i t·ª´ 0 ƒë·∫øn 10" };
    }

    // Round according to IUH rules
    const roundedValue = roundScoreIUH(numValue);

    return { isValid: true, value: roundedValue };
  };

  // H√†m ki·ªÉm tra m√¥n ƒë·∫∑c bi·ªát (ch·ªâ c√≥ m·ªôt c·ªôt ƒëi·ªÉm t·ªïng k·∫øt)
  const isSpecialSubject = (subjectName, subject = null) => {
    const specialSubjects = [
      "th·ª±c t·∫≠p doanh nghi·ªáp",
      "kh√≥a lu·∫≠n t·ªët nghi·ªáp",
      "ƒë·ªì √°n t·ªët nghi·ªáp",
      "th·ª±c t·∫≠p t·ªët nghi·ªáp",
      "lu·∫≠n vƒÉn t·ªët nghi·ªáp",
      "th·ª±c t·∫≠p chuy√™n ng√†nh",
      "ƒë·ªì √°n chuy√™n ng√†nh",
      "gi√°o d·ª•c th·ªÉ ch·∫•t 1",
      "gi√°o d·ª•c th·ªÉ ch·∫•t 2",
    ];

    // Ki·ªÉm tra danh s√°ch m√¥n ƒë·∫∑c bi·ªát c·ªë ƒë·ªãnh
    const isInSpecialList = specialSubjects.some((special) =>
      subjectName.toLowerCase().includes(special.toLowerCase())
    );

    if (isInSpecialList) {
      return true;
    }

    // Ki·ªÉm tra ƒë·∫∑c bi·ªát cho "Ti·∫øng Anh 2" v√† c√°c m√¥n t∆∞∆°ng t·ª±
    if (subjectName.toLowerCase().includes("ti·∫øng anh") && subject) {
      // Ki·ªÉm tra xem c√≥ ƒëi·ªÉm gi·ªØa k·ª≥ v√† th∆∞·ªùng xuy√™n kh√¥ng
      const hasGiuaKy =
        subject.diemGiuaKy !== null && subject.diemGiuaKy !== undefined;
      const hasThuongXuyen = subject.thuongXuyen.some(
        (score) => score !== null && score !== undefined
      );

      // N·∫øu kh√¥ng c√≥ ƒëi·ªÉm gi·ªØa k·ª≥ v√† th∆∞·ªùng xuy√™n ‚Üí m√¥n ƒë·∫∑c bi·ªát
      if (!hasGiuaKy && !hasThuongXuyen) {
        return true;
      }
    }

    return false;
  };

  // H√†m x·ª≠ l√Ω thay ƒë·ªïi lo·∫°i m√¥n h·ªçc
  const handleSubjectTypeChange = (semesterIndex, subjectIndex, newType) => {
    const key = `${semesterIndex}-${subjectIndex}`;

    // C·∫≠p nh·∫≠t lo·∫°i m√¥n h·ªçc
    setSubjectTypes((prev) => ({
      ...prev,
      [key]: newType,
    }));

    // ƒê√°nh d·∫•u m√¥n n√†y ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th·ªß c√¥ng
    setManuallyChangedSubjects((prev) => ({
      ...prev,
      [key]: true,
    }));

    console.log(`User manually changed subject type for ${key} to ${newType}`);
  };

  // H√†m t·ª± ƒë·ªông x√°c ƒë·ªãnh lo·∫°i m√¥n d·ª±a tr√™n ch∆∞∆°ng tr√¨nh khung
  const getAutoSubjectType = (subjectName, subject = null) => {
    try {
      // Ki·ªÉm tra ƒë·∫∑c bi·ªát cho "Ti·∫øng Anh" khi kh√¥ng c√≥ ƒëi·ªÉm gi·ªØa k·ª≥ v√† th∆∞·ªùng xuy√™n
      if (subject && subjectName.toLowerCase().includes("ti·∫øng anh")) {
        const hasGiuaKy =
          subject.diemGiuaKy !== null && subject.diemGiuaKy !== undefined;
        const hasThuongXuyen = subject.thuongXuyen.some(
          (score) => score !== null && score !== undefined
        );

        // N·∫øu kh√¥ng c√≥ ƒëi·ªÉm gi·ªØa k·ª≥ v√† th∆∞·ªùng xuy√™n ‚Üí m√¥n ƒë·∫∑c bi·ªát (ch·ªâ c√≥ ƒëi·ªÉm cu·ªëi k·ª≥)
        if (!hasGiuaKy && !hasThuongXuyen) {
          // console.log(`‚Üí "${subjectName}" classified as SPECIAL (no midterm/regular scores)`);
          return "SPECIAL"; // M√¥n ƒë·∫∑c bi·ªát
        }
      }

      // Ki·ªÉm tra curriculum ƒë√£ ƒë∆∞·ª£c load ch∆∞a
      if (!curriculumLoaded) {
        console.log("Curriculum not loaded yet, defaulting to CHUA_XAC_DINH");
        return "CHUA_XAC_DINH";
      }

      // Ki·ªÉm tra xem c√≥ d·ªØ li·ªáu ch∆∞∆°ng tr√¨nh khung kh√¥ng
      if (typeof window.getCurriculumInfo !== "function") {
        console.log(
          "No curriculum data available, defaulting to CHUA_XAC_DINH"
        );
        return "CHUA_XAC_DINH";
      }

      // Ki·ªÉm tra xem window.getCurriculumInfo c√≥ t·ªìn t·∫°i kh√¥ng
      if (typeof window.getCurriculumInfo === "function") {
        const curriculumInfo = window.getCurriculumInfo(subjectName);
        // console.log(`Full curriculum info for "${subjectName}":`, curriculumInfo);

        if (
          curriculumInfo &&
          (curriculumInfo.soTLT !== null || curriculumInfo.soTTH !== null)
        ) {
          let soTLT = curriculumInfo.soTLT;
          let soTTH = curriculumInfo.soTTH;

          // Ki·ªÉm tra c√°c t√™n thu·ªôc t√≠nh kh√°c c√≥ th·ªÉ c√≥
          if (soTLT === null || soTLT === undefined) {
            soTLT =
              curriculumInfo.soTinChiLyThuyet ||
              curriculumInfo.lyThuyet ||
              curriculumInfo.LT ||
              0;
          }
          if (soTTH === null || soTTH === undefined) {
            soTTH =
              curriculumInfo.soTinChiThucHanh ||
              curriculumInfo.thucHanh ||
              curriculumInfo.TH ||
              0;
          }

          // console.log(`Auto classify "${subjectName}": soTLT=${soTLT}, soTTH=${soTTH}`);

          // X√°c ƒë·ªãnh lo·∫°i m√¥n d·ª±a tr√™n soTLT v√† soTTH
          if (soTLT > 0 && soTTH > 0) {
            // console.log(`‚Üí Classified as T√çCH H·ª¢P`);
            return "TICH_HOP"; // M√¥n t√≠ch h·ª£p
          } else if (soTLT === 0 && soTTH > 0) {
            // console.log(`‚Üí Classified as TH·ª∞C H√ÄNH`);
            return "TH"; // M√¥n th·ª±c h√†nh
          } else if (soTLT > 0 && soTTH === 0) {
            // console.log(`‚Üí Classified as L√ù THUY·∫æT`);
            return "LT"; // M√¥n l√Ω thuy·∫øt
          }
        } else {
          // Kh√¥ng t√¨m th·∫•y th√¥ng tin trong ch∆∞∆°ng tr√¨nh khung, s·ª≠ d·ª•ng logic d·ª± ph√≤ng
          console.log(
            `No curriculum info found for "${subjectName}", defaulting to CHUA_XAC_DINH`
          );
          return "CHUA_XAC_DINH";
        }
      }
    } catch (error) {
      console.warn("L·ªói khi l·∫•y th√¥ng tin t·ª´ ch∆∞∆°ng tr√¨nh khung:", error);
      return "CHUA_XAC_DINH";
    }

    console.log(
      `‚Üí Default to CH∆ØA X√ÅC ƒê·ªäNH for "${subjectName}" (no curriculum data or fallback)`
    );
    // M·∫∑c ƒë·ªãnh l√† ch∆∞a x√°c ƒë·ªãnh n·∫øu kh√¥ng c√≥ ch∆∞∆°ng tr√¨nh khung
    return "CHUA_XAC_DINH";
  }; // H√†m l·∫•y lo·∫°i m√¥n h·ªçc hi·ªán t·∫°i
  const getCurrentSubjectType = (semesterIndex, subjectIndex) => {
    const key = `${semesterIndex}-${subjectIndex}`;

    // N·∫øu ƒë√£ c√≥ trong state (t·ª´ ph√¢n lo·∫°i t·ª± ƒë·ªông ho·∫∑c l·ª±a ch·ªçn th·ªß c√¥ng), s·ª≠ d·ª•ng n√≥
    if (subjectTypes[key]) {
      return subjectTypes[key];
    }

    // N·∫øu ch∆∞a c√≥, th·ª≠ ph√¢n lo·∫°i t·ª± ƒë·ªông (fallback case)
    if (
      gradesData &&
      gradesData.semesters &&
      gradesData.semesters[semesterIndex] &&
      gradesData.semesters[semesterIndex].subjects &&
      gradesData.semesters[semesterIndex].subjects[subjectIndex]
    ) {
      const subject =
        gradesData.semesters[semesterIndex].subjects[subjectIndex];
      const autoType = getAutoSubjectType(subject.name, subject);

      // L∆∞u k·∫øt qu·∫£ t·ª± ƒë·ªông v√†o subjectTypes
      setSubjectTypes((prev) => ({
        ...prev,
        [key]: autoType,
      }));

      return autoType;
    }

    // M·∫∑c ƒë·ªãnh l√† L√Ω thuy·∫øt n·∫øu kh√¥ng th·ªÉ x√°c ƒë·ªãnh
    return "LT";
  };

  // Component t·∫°o selection button cho lo·∫°i m√¥n h·ªçc
  createSubjectTypeSelector = (semesterIndex, subjectIndex) => {
    const currentType = getCurrentSubjectType(semesterIndex, subjectIndex);
    const dropdownKey = `${semesterIndex}-${subjectIndex}`;
    const isOpen = openDropdowns[dropdownKey] || false;
    const isManuallyChanged = manuallyChangedSubjects[dropdownKey] || false;

    const options = [
      {
        value: "CHUA_XAC_DINH",
        label: "N/A",
        title: "Ch∆∞a x√°c ƒë·ªãnh lo·∫°i m√¥n (cho ph√©p nh·∫≠p t·∫•t c·∫£ c·ªôt)",
      },
      {
        value: "LT",
        label: "L√Ω thuy·∫øt",
        title: "M√¥n l√Ω thuy·∫øt (soTLT > 0, soTTH = 0)",
      },
      {
        value: "TH",
        label: "Th·ª±c h√†nh",
        title: "M√¥n th·ª±c h√†nh (soTLT = 0, soTTH > 0)",
      },
      {
        value: "TICH_HOP",
        label: "T√≠ch h·ª£p",
        title: "M√¥n t√≠ch h·ª£p (soTLT > 0, soTTH > 0)",
      },
      {
        value: "SPECIAL",
        label: "ƒê·∫∑c bi·ªát",
        title: "M√¥n ƒë·∫∑c bi·ªát (ch·ªâ c√≥ ƒëi·ªÉm cu·ªëi k·ª≥)",
      },
    ];

    // Th√™m t√πy ch·ªçn reset n·∫øu m√¥n ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th·ªß c√¥ng
    if (isManuallyChanged) {
      options.push({
        value: "RESET_AUTO",
        label: "üîÑ Reset v·ªÅ t·ª± ƒë·ªông",
        title: "ƒê·∫∑t l·∫°i v·ªÅ ph√¢n lo·∫°i t·ª± ƒë·ªông theo ch∆∞∆°ng tr√¨nh khung",
        isReset: true,
      });
    }

    const currentOption = options.find((opt) => opt.value === currentType);

    // Function to check if dropdown should open upward
    const shouldOpenUpward = (element) => {
      if (!element) return false;

      const table = element.closest("table");
      if (!table) return false;

      const tbody = table.querySelector("tbody");
      if (!tbody) return false;

      const subjectRows = tbody.querySelectorAll("tr.subject-row");
      const totalRows = subjectRows.length;

      const currentRow = element.closest("tr.subject-row");
      if (!currentRow) return false;

      const currentIndex = Array.from(subjectRows).indexOf(currentRow);

      if (totalRows <= 3) {
        return false;
      } else if (totalRows <= 5){
        return currentIndex >= totalRows - 2;
      } else {
        return currentIndex >= totalRows - 4;
      }
    };

    const handleToggleDropdown = (event) => {
      setOpenDropdowns((prev) => {
        const isCurrentlyOpen = prev[dropdownKey];

        if (isCurrentlyOpen) {
          // N·∫øu dropdown hi·ªán t·∫°i ƒëang m·ªü, ƒë√≥ng n√≥
          return {};
        } else {
          // N·∫øu dropdown hi·ªán t·∫°i ƒëang ƒë√≥ng, ƒë√≥ng t·∫•t c·∫£ v√† m·ªü ch·ªâ dropdown n√†y
          return { [dropdownKey]: true };
        }
      });
    };

    const handleOptionClick = (value) => {
      if (value === "RESET_AUTO") {
        // Reset v·ªÅ auto-classify
        const key = `${semesterIndex}-${subjectIndex}`;

        // X√≥a kh·ªèi danh s√°ch ƒë√£ thay ƒë·ªïi th·ªß c√¥ng
        setManuallyChangedSubjects((prev) => {
          const newState = { ...prev };
          delete newState[key];
          return newState;
        });

        // T·ª± ƒë·ªông ph√¢n lo·∫°i l·∫°i m√¥n n√†y
        if (
          gradesData &&
          gradesData.semesters &&
          gradesData.semesters[semesterIndex] &&
          gradesData.semesters[semesterIndex].subjects &&
          gradesData.semesters[semesterIndex].subjects[subjectIndex]
        ) {
          const subject =
            gradesData.semesters[semesterIndex].subjects[subjectIndex];
          const autoType = getAutoSubjectType(subject.name, subject);

          setSubjectTypes((prev) => ({
            ...prev,
            [key]: autoType,
          }));

          console.log(`Reset subject ${key} to auto-classify: ${autoType}`);
        }
      } else {
        handleSubjectTypeChange(semesterIndex, subjectIndex, value);
      }

      setOpenDropdowns((prev) => ({
        ...prev,
        [dropdownKey]: false,
      }));
    };

    return React.createElement(
      "td",
      {
        className: "td-subject-type",
        style: { textAlign: "center", padding: "8px", position: "relative" },
      },
      React.createElement(
        "div",
        {
          className: "custom-dropdown",
          style: {
            position: "relative",
            display: "inline-block",
            minWidth: "105px",
            maxWidth: "125px",
          },
        },
        // Custom dropdown button
        React.createElement(
          "div",
          {
            onClick: handleToggleDropdown,
            ref: (el) => {
              if (el) {
                el.dataset.dropdownKey = dropdownKey;
              }
            },
            style: {
              padding: "6px 28px 6px 12px",
              borderRadius: "6px",
              border: "none",
              outline: "none",
              backgroundColor: isOpen ? "#e2e8f0" : "#f8fafc",
              color: "#1e293b",
              fontSize: "13px",
              fontWeight: "500",
              cursor: "pointer",
              transition: "all 0.2s ease",
              userSelect: "none",
              position: "relative",
              display: "flex",
              alignItems: "center",
              justifyContent: "space-between",
            },
            title: isManuallyChanged
              ? `${
                  currentOption?.title || "Lo·∫°i m√¥n"
                } (ƒê√£ thay ƒë·ªïi th·ªß c√¥ng - Click ƒë·ªÉ xem t√πy ch·ªçn Reset)`
              : currentOption?.title ||
                "Lo·∫°i m√¥n ƒë∆∞·ª£c x√°c ƒë·ªãnh t·ª± ƒë·ªông t·ª´ ch∆∞∆°ng tr√¨nh khung",
          },
          React.createElement(
            "span",
            null,
            isManuallyChanged
              ? `${currentOption?.label || "T·ª± ƒë·ªông"} ‚úèÔ∏è`
              : currentOption?.label || "T·ª± ƒë·ªông"
          ),
          React.createElement(
            "svg",
            {
              style: {
                width: "16px",
                height: "16px",
                transform: isOpen ? "rotate(180deg)" : "rotate(0deg)",
                transition: "transform 0.2s ease",
                position: "absolute",
                right: "8px",
              },
              fill: "none",
              viewBox: "0 0 20 20",
            },
            React.createElement("path", {
              stroke: "#6b7280",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: "1.5",
              d: "m6 8 4 4 4-4",
            })
          )
        ),
        // Custom dropdown menu with dynamic positioning
        isOpen &&
          React.createElement(
            "div",
            {
              ref: (el) => {
                if (el) {
                  const button = el.parentElement.querySelector(
                    '[data-dropdown-key="' + dropdownKey + '"]'
                  );
                  const openUpward = shouldOpenUpward(button);

                  if (openUpward) {
                    el.style.bottom = "100%";
                    el.style.top = "auto";
                    el.style.marginBottom = "1px";
                    el.style.marginTop = "0";
                  } else {
                    el.style.top = "100%";
                    el.style.bottom = "auto";
                    el.style.marginTop = "1px";
                    el.style.marginBottom = "0";
                  }

                  el.style.opacity = "0";
                  el.style.transform = openUpward
                    ? "translateY(5px)"
                    : "translateY(-5px)";

                  requestAnimationFrame(() => {
                    el.style.transition =
                      "opacity 0.15s ease, transform 0.15s ease";
                    el.style.opacity = "1";
                    el.style.transform = "translateY(0)";
                  });
                }
              },
              style: {
                position: "absolute",
                left: "0",
                right: "0",
                backgroundColor: "#ffffff",
                border: "1px solid #d1d5db",
                borderRadius: "4px",
                boxShadow:
                  "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)",
                zIndex: 1000,
                overflow: "hidden",
                maxHeight: "200px",
                overflowY: "auto",
              },
            },
            options.map((option, index) =>
              React.createElement(
                "div",
                {
                  key: option.value,
                  onClick: () => handleOptionClick(option.value),
                  style: {
                    padding: "8px 10px",
                    fontSize: "13px",
                    fontWeight: option.isReset ? "bold" : "500",
                    cursor: "pointer",
                    backgroundColor:
                      option.value === currentType
                        ? "#eff6ff"
                        : option.isReset
                        ? "#f0f9ff"
                        : "#ffffff",
                    color:
                      option.value === currentType
                        ? "#1d4ed8"
                        : option.isReset
                        ? "#0369a1"
                        : "#374151",
                    transition: "background-color 0.1s ease",
                    borderTop: option.isReset ? "1px solid #e5e7eb" : "none",
                  },
                  title: option.title,
                },
                option.label
              )
            )
          )
      )
    );
  };

  const loadGradesFromStorage = async () => {
    setIsLoading(true);
    setError(null);

    // Reset tr·∫°ng th√°i thay ƒë·ªïi th·ªß c√¥ng khi load d·ªØ li·ªáu m·ªõi
    setManuallyChangedSubjects({});

    try {
      // Attempt to load from Chrome storage first
      if (typeof chrome !== "undefined" && chrome.storage) {
        chrome.storage.local.get(["diem_json"], (result) => {
          if (result.diem_json) {
            try {
              const storedData = JSON.parse(result.diem_json);
              const processedData = processIUHGradesData(storedData);

              // T√≠nh to√°n summary cho d·ªØ li·ªáu th·∫≠t
              if (processedData && processedData.semesters) {
                processedData.semesters.forEach((semester, index) => {
                  calculateSemesterSummary(
                    semester,
                    index,
                    processedData.semesters
                  );
                });
              }

              setGradesData(processedData);
            } catch (parseError) {
              console.error("Error parsing stored grades data:", parseError);
              loadMockData();
            }
          } else {
            console.log("No grades data found in storage, loading mock data");
            loadMockData();
          }
          setIsLoading(false);
        });
      } else {
        // Fallback to mock data if chrome storage not available
        loadMockData();
        setIsLoading(false);
      }
    } catch (error) {
      console.error("Error loading grades:", error);
      setError("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ƒëi·ªÉm");
      loadMockData();
      setIsLoading(false);
    }
  };

  const loadMockData = () => {
    // Reset tr·∫°ng th√°i thay ƒë·ªïi th·ªß c√¥ng khi load mock data
    setManuallyChangedSubjects({});

    // Mock data theo format IUH t·ª´ h√¨nh ·∫£nh
    const mockData = {
      semesters: [
        {
          name: "HK1 (2022 - 2023)",
          subjects: [
            {
              stt: 1,
              maLhp: "420300200907",
              name: "Nh·∫≠p m√¥n Tin h·ªçc",
              credits: 2,
              diemGiuaKy: 7.5,
              thuongXuyen: [8.5, 8.5, null, null],
              thucHanh: [null, null, null, null, null],
              diemCuoiKy: 8.0,
              diemTongKet: 8.0,
              thangDiem4: 3.5,
              diemChu: "B+",
              xepLoai: "Kh√°",
              ghiChu: "",
              dat: "‚úì",
            },
            {
              stt: 2,
              maLhp: "420300319249",
              name: "K·ªπ nƒÉng l√†m vi·ªác nh√≥m",
              credits: 2,
              diemGiuaKy: 8.5,
              thuongXuyen: [9.5, 8.0, null, null],
              thucHanh: [8.0, 8.5, 8.0, null, null],
              diemCuoiKy: 9.5,
              diemTongKet: 8.6,
              thangDiem4: 3.8,
              diemChu: "A",
              xepLoai: "Gi·ªèi",
              ghiChu: "",
              dat: "‚úì",
            },
            {
              stt: 3,
              maLhp: "420300324283",
              name: "Gi√°o d·ª•c Qu·ªëc ph√≤ng v√† An ninh 1",
              credits: 4,
              diemGiuaKy: 8.5,
              thuongXuyen: [9.5, 9.5, 8.0, null],
              thucHanh: [null, null, null, null, null],
              diemCuoiKy: 7.0,
              diemTongKet: 7.9,
              thangDiem4: 3.0,
              diemChu: "B",
              xepLoai: "Kh√°",
              ghiChu: "",
              dat: "‚úì",
            },
            {
              stt: 4,
              maLhp: "420300325966",
              name: "To√°n cao c·∫•p 1",
              credits: 2,
              diemGiuaKy: 10.0,
              thuongXuyen: [9.0, 9.0, null, null],
              thucHanh: [null, null, null, null, null],
              diemCuoiKy: 9.0,
              diemTongKet: 9.3,
              thangDiem4: 4.0,
              diemChu: "A+",
              xepLoai: "Xu·∫•t s·∫Øc",
              ghiChu: "",
              dat: "‚úì",
            },
            {
              stt: 5,
              maLhp: "420300330741",
              name: "Gi√°o d·ª•c th·ªÉ ch·∫•t 1",
              credits: 2,
              diemGiuaKy: null,
              thuongXuyen: [null, null, null, null],
              thucHanh: [null, null, null, null, null],
              diemCuoiKy: 7.0,
              diemTongKet: 7.0,
              thangDiem4: 3.0,
              diemChu: "B",
              xepLoai: "Kh√°",
              ghiChu: "",
              dat: "‚úì",
            },
            {
              stt: 6,
              maLhp: "420300384837",
              name: "Nh·∫≠p m√¥n L·∫≠p tr√¨nh",
              credits: 2,
              diemGiuaKy: 0,
              thuongXuyen: [null, null, null, null],
              thucHanh: [10.0, 9.0, 10.0, null, null],
              diemCuoiKy: 10.0,
              diemTongKet: null,
              thangDiem4: 0,
              diemChu: "F",
              xepLoai: "K√©m",
              ghiChu: "C·∫•m thi",
              dat: "",
            },
            {
              stt: 7,
              maLhp: "420301416477",
              name: "Tri·∫øt h·ªçc M√°c - L√™nin",
              credits: 3,
              diemGiuaKy: 7.0,
              thuongXuyen: [10.0, 10.0, 9.5, null],
              thucHanh: [null, null, null, null, null],
              diemCuoiKy: 0,
              diemTongKet: 0,
              thangDiem4: 0,
              diemChu: "F",
              xepLoai: "K√©m",
              ghiChu: "Cu·ªëi k·ª≥ = 0",
              dat: "",
            },
            {
              stt: 8,
              maLhp: "420301416500",
              name: "Th·ª±c t·∫≠p doanh nghi·ªáp",
              credits: 4,
              diemGiuaKy: null,
              thuongXuyen: [null, null, null, null],
              thucHanh: [null, null, null, null, null],
              diemCuoiKy: 8.5,
              diemTongKet: 8.5,
              thangDiem4: 3.5,
              diemChu: "B+",
              xepLoai: "Kh√°",
              ghiChu: "",
              dat: "‚úì",
            },
            {
              stt: 9,
              maLhp: "420300200908",
              name: "V·∫≠t l√Ω ƒë·∫°i c∆∞∆°ng",
              credits: 3,
              diemGiuaKy: 8.0,
              thuongXuyen: [7.5, 8.0, null, null],
              thucHanh: [null, null, null, null, null],
              diemCuoiKy: 2.5,
              diemTongKet: null,
              thangDiem4: 0,
              diemChu: "F",
              xepLoai: "K√©m",
              ghiChu: "CK < 3",
              dat: "",
            },
          ],
        },
      ],
    };

    // Set d·ªØ li·ªáu tr∆∞·ªõc
    setGradesData(mockData);

    // Ch·ªù curriculum data ƒë∆∞·ª£c load tr∆∞·ªõc khi ph√¢n lo·∫°i
    const waitForCurriculumAndClassify = () => {
      if (!curriculumLoaded) {
        console.log("Waiting for curriculum to load...");
        setTimeout(waitForCurriculumAndClassify, 500);
        return;
      }

      console.log("Starting auto classification for mock data...");
      const newSubjectTypes = {};

      mockData.semesters.forEach((semester, semesterIndex) => {
        semester.subjects.forEach((subject, subjectIndex) => {
          const key = `${semesterIndex}-${subjectIndex}`;
          const autoType = getAutoSubjectType(subject.name, subject);
          // console.log(`Subject "${subject.name}" auto-classified as: ${autoType}`);
          newSubjectTypes[key] = autoType;
        });
      });

      setSubjectTypes(newSubjectTypes);
      console.log("Auto classification completed:", newSubjectTypes);
    };

    waitForCurriculumAndClassify();
  };

  // Process raw IUH data from contentScript into our format
  const processIUHGradesData = (rawData) => {
    if (!Array.isArray(rawData)) return null;

    const semesters = rawData.map((semester, index) => ({
      name: semester.hocKy || `H·ªçc k·ª≥ ${index + 1}`,
      subjects: semester.monHoc
        ? semester.monHoc
            .filter((subject, subIndex) => {
              // Only take actual subjects (usually index 0-6), skip summary rows
              // Summary rows have STT like "ƒêi·ªÉm trung b√¨nh h·ªçc k·ª≥ h·ªá 10: ..."
              const stt = subject["STT"];
              return (
                stt &&
                !stt.includes("ƒêi·ªÉm trung b√¨nh") &&
                !stt.includes("T·ªïng s·ªë") &&
                !stt.includes("X·∫øp lo·∫°i h·ªçc l·ª±c")
              );
            })
            .map((subject, subIndex) => {
              // Parse scores from IUH format
              const parseScore = (scoreStr) => {
                if (!scoreStr || scoreStr === "") {
                  return null;
                }
                // Convert Vietnamese decimal format (8,50) to JS format (8.50)
                const normalizedStr = scoreStr.toString().replace(",", ".");
                const parsed = parseFloat(normalizedStr);
                if (isNaN(parsed)) {
                  return null;
                }
                // L√†m tr√≤n ƒë·∫øn 1 ch·ªØ s·ªë th·∫≠p ph√¢n
                return Math.round(parsed * 10) / 10;
              };

              const subjectName =
                subject["T√™n m√¥n h·ªçc"] || subject["T√™n m√¥n h·ªçc/h·ªçc ph·∫ßn"] || "";

              // T·∫°m th·ªùi ƒë·∫∑t lo·∫°i m·∫∑c ƒë·ªãnh, s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t sau khi curriculum load xong
              const key = `${index}-${subIndex}`;

              // L∆∞u lo·∫°i m√¥n m·∫∑c ƒë·ªãnh v√†o state (s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t sau)
              setSubjectTypes((prev) => ({
                ...prev,
                [key]: "CHUA_XAC_DINH", // Default to ch∆∞a x√°c ƒë·ªãnh, will be updated after curriculum loads
              }));

              return {
                stt: subIndex + 1,
                maLhp: subject["M√£ l·ªõp h·ªçc ph·∫ßn"] || "",
                name: subjectName,
                credits:
                  parseInt(subject["S·ªë t√≠n ch·ªâ"] || subject["T√≠n ch·ªâ"]) || 0,
                diemGiuaKy: parseScore(subject["Gi·ªØa k·ª≥"]),
                // Parse Th∆∞·ªùng xuy√™n columns (4 columns)
                thuongXuyen: [
                  parseScore(subject["Th∆∞·ªùng xuy√™n LT H·ªá s·ªë 1 1"]),
                  parseScore(subject["Th∆∞·ªùng xuy√™n LT H·ªá s·ªë 1 2"]),
                  parseScore(subject["Th∆∞·ªùng xuy√™n LT H·ªá s·ªë 1 3"]),
                  parseScore(subject["Th∆∞·ªùng xuy√™n LT H·ªá s·ªë 1 4"]),
                ],
                // Parse Th·ª±c h√†nh columns (5 columns)
                thucHanh: [
                  parseScore(subject["Th·ª±c h√†nh 1"]),
                  parseScore(subject["Th·ª±c h√†nh 2"]),
                  parseScore(subject["Th·ª±c h√†nh 3"]),
                  parseScore(subject["Th·ª±c h√†nh 4"]),
                  parseScore(subject["Th·ª±c h√†nh 5"]),
                ],
                diemCuoiKy: parseScore(subject["Cu·ªëi k·ª≥"]),
                diemTongKet: parseScore(subject["ƒêi·ªÉm t·ªïng k·∫øt"]),
                thangDiem4: parseScore(subject["Thang ƒëi·ªÉm 4"]),
                diemChu: subject["ƒêi·ªÉm ch·ªØ"] || "",
                xepLoai: subject["X·∫øp lo·∫°i"] || "",
                ghiChu: subject["Ghi ch√∫"] || "",
                dat: subject["ƒê·∫°t"] || "",
              };
            })
        : [],
    }));

    return { semesters: semesters };
  };

  // H√†m t√≠nh ƒëi·ªÉm t·ª´ CalculateScore.js
  const calculateScore = (score, semesterIndex, subjectIndex) => {
    const { dsDiemTK, dsDiemTH, giuaKy, cuoiKy, tinChi } = score;

    // L·∫•y lo·∫°i m√¥n ƒë∆∞·ª£c ch·ªçn th·ªß c√¥ng ho·∫∑c t·ª± ƒë·ªông
    const subjectType = getCurrentSubjectType(semesterIndex, subjectIndex);

    let diemTongKet = 0;
    const slDiemLTKhacKhong = dsDiemTK.filter((score) => score !== 0).length;
    const slDiemTHKhacKhong = dsDiemTH.filter((score) => score !== 0).length;

    // Debug log ƒë·ªÉ ki·ªÉm tra
    console.log(
      `Subject type: ${subjectType}, slDiemLTKhacKhong: ${slDiemLTKhacKhong}, slDiemTHKhacKhong: ${slDiemTHKhacKhong}`
    );
    console.log(`dsDiemTK:`, dsDiemTK);
    console.log(`dsDiemTH:`, dsDiemTH);

    if (subjectType === "TH") {
      // M√¥n th·ª±c h√†nh - t√≠nh trung b√¨nh c·ªông c·ªßa c√°c ƒëi·ªÉm th·ª±c h√†nh ƒë√£ nh·∫≠p
      const validScores = dsDiemTH.filter(
        (score) => score !== null && score !== undefined && score !== 0
      );
      if (validScores.length > 0) {
        diemTongKet =
          validScores.reduce((sum, score) => sum + score, 0) /
          validScores.length;
        console.log(
          `Practical subject calculation: ${diemTongKet} from scores:`,
          validScores
        );
      } else {
        // N·∫øu ch∆∞a c√≥ ƒëi·ªÉm th·ª±c h√†nh n√†o, tr·∫£ v·ªÅ null ƒë·ªÉ kh√¥ng hi·ªÉn th·ªã k·∫øt qu·∫£
        console.log("No practical scores available");
        return {
          diemTongKet: null,
          diemTongKet4: null,
          diemChu: "",
          xepLoai: "",
          ghiChu: "",
          isDat: false,
        };
      }
    } else if (subjectType === "LT") {
      // M√¥n l√Ω thuy·∫øt - ch·ªâ d√πng c√¥ng th·ª©c l√Ω thuy·∫øt
      if (slDiemLTKhacKhong > 0) {
        diemTongKet =
          ((dsDiemTK.reduce((prev, curr) => prev + curr, 0) /
            slDiemLTKhacKhong) *
            20 +
            giuaKy * 30 +
            cuoiKy * 50) /
          100;
      } else {
        // N·∫øu ch∆∞a c√≥ ƒëi·ªÉm th∆∞·ªùng xuy√™n, ch·ªâ t√≠nh gi·ªØa k·ª≥ v√† cu·ªëi k·ª≥
        diemTongKet = (giuaKy * 30 + cuoiKy * 70) / 100;
      }
    } else if (subjectType === "TICH_HOP" || subjectType === "CHUA_XAC_DINH") {
      // M√¥n t√≠ch h·ª£p ho·∫∑c ch∆∞a x√°c ƒë·ªãnh - k·∫øt h·ª£p l√Ω thuy·∫øt v√† th·ª±c h√†nh
      const diemTongKetLT =
        slDiemLTKhacKhong > 0
          ? ((dsDiemTK.reduce((prev, curr) => prev + curr, 0) /
              slDiemLTKhacKhong) *
              20 +
              giuaKy * 30 +
              cuoiKy * 50) /
            100
          : (giuaKy * 30 + cuoiKy * 70) / 100;

      const validThucHanhScores = dsDiemTH.filter(
        (score) => score !== null && score !== undefined && score !== 0
      );

      if (validThucHanhScores.length > 0) {
        const diemTongKetTH =
          validThucHanhScores.reduce((sum, score) => sum + score, 0) /
          validThucHanhScores.length;
        if (tinChi === 2) {
          // M√¥n t√≠ch h·ª£p 2 t√≠n ch·ªâ: 0.4 t√≠n l√Ω thuy·∫øt + 0.6 t√≠n th·ª±c h√†nh
          diemTongKet = diemTongKetLT * 0.4 + diemTongKetTH * 0.6;
        } else if (tinChi === 3) {
          // M√¥n t√≠ch h·ª£p 3 t√≠n ch·ªâ: 2 t√≠n l√Ω thuy·∫øt + 1 t√≠n th·ª±c h√†nh
          diemTongKet = (diemTongKetLT * 2 + diemTongKetTH) / 3;
        } else {
          // M√¥n t√≠ch h·ª£p 4+ t√≠n ch·ªâ: 3 t√≠n l√Ω thuy·∫øt + 1 t√≠n th·ª±c h√†nh
          diemTongKet = (diemTongKetLT * 3 + diemTongKetTH) / 4;
        }
      } else {
        // N·∫øu ch∆∞a c√≥ ƒëi·ªÉm th·ª±c h√†nh, ch·ªâ t√≠nh ph·∫ßn l√Ω thuy·∫øt
        diemTongKet = diemTongKetLT;
      }
    } else {
      // M√¥n ƒë·∫∑c bi·ªát - ch·ªâ d√πng ƒëi·ªÉm cu·ªëi k·ª≥
      diemTongKet = cuoiKy;
    }

    const diemTongKet4 = convertScore10To4(diemTongKet);
    return {
      diemTongKet: diemTongKet,
      diemTongKet4: diemTongKet4,
      diemChu: convertScore4ToChar(diemTongKet4),
      xepLoai: convertScore4ToClassification(diemTongKet4),
      ghiChu: diemTongKet4 !== 0 ? "" : "H·ªçc l·∫°i",
      isDat: diemTongKet4 !== 0,
    };
  };

  // H√†m chuy·ªÉn ƒë·ªïi ƒëi·ªÉm t·ª´ CalculateScore.js
  const convertScore10To4 = (score) => {
    // L√†m tr√≤n ƒëi·ªÉm ƒë·∫øn 1 ch·ªØ s·ªë th·∫≠p ph√¢n tr∆∞·ªõc khi chuy·ªÉn ƒë·ªïi
    score = Math.round(score * 10) / 10;
    if (score >= 9.0) return 4;
    if (score >= 8.5) return 3.8;
    if (score >= 8.0) return 3.5;
    if (score >= 7.0) return 3;
    if (score >= 6.0) return 2.5;
    if (score >= 5.5) return 2;
    if (score >= 5.0) return 1.5;
    if (score >= 4.0) return 1;
    return 0;
  };

  const convertScore4ToChar = (score) => {
    if (score === 4) return "A+";
    if (score === 3.8) return "A";
    if (score === 3.5) return "B+";
    if (score === 3) return "B";
    if (score === 2.5) return "C+";
    if (score === 2) return "C";
    if (score === 1.5) return "D+";
    if (score === 1) return "D";
    return "F";
  };

  const convertScore4ToClassification = (score) => {
    if (score === 4) return "Xu·∫•t s·∫Øc";
    if (score === 3.8) return "Gi·ªèi";
    if (score >= 3) return "Kh√°";
    if (score >= 2) return "Trung b√¨nh";
    if (score >= 1) return "Trung b√¨nh y·∫øu";
    return "K√©m";
  };

  const convertScore4ToClassificationHK = (score) => {
    // L√†m tr√≤n ƒëi·ªÉm ƒë·ªÉ tr√°nh l·ªói floating point v·ªõi 2 ch·ªØ s·ªë th·∫≠p ph√¢n
    score = Math.round(score * 100) / 100;

    if (score >= 3.6) return "Xu·∫•t s·∫Øc";
    if (score >= 3.2) return "Gi·ªèi";
    if (score >= 2.5) return "Kh√°";
    if (score >= 2.0) return "Trung b√¨nh";
    return "K√©m";
  };

  // H√†m x·ª≠ l√Ω khi ƒëi·ªÉm thay ƒë·ªïi
  const handleScoreChange = (semesterIndex, subjectIndex, field, value) => {
    const newGradesData = { ...gradesData };
    const subject =
      newGradesData.semesters[semesterIndex].subjects[subjectIndex];
    const selectedType = getCurrentSubjectType(semesterIndex, subjectIndex);

    // Validate ƒëi·ªÉm v·ªõi quy t·∫Øc IUH
    const validation = validateScore(value);
    if (!validation.isValid) {
      // Hi·ªÉn th·ªã l·ªói cho user (c√≥ th·ªÉ th√™m toast notification sau)
      console.warn("Validation error:", validation.error);
      return;
    }

    const parsedValue = validation.value;

    // C·∫≠p nh·∫≠t ƒëi·ªÉm
    if (field.startsWith("thuongXuyen")) {
      const index = parseInt(field.split("-")[1]);
      subject.thuongXuyen[index] = parsedValue;
    } else if (field.startsWith("thucHanh")) {
      const index = parseInt(field.split("-")[1]);
      subject.thucHanh[index] = parsedValue;
    } else {
      subject[field] = parsedValue;
    }

    // X·ª≠ l√Ω t√≠nh ƒëi·ªÉm d·ª±a tr√™n lo·∫°i m√¥n ƒë∆∞·ª£c ch·ªçn
    if (selectedType === "SPECIAL") {
      // M√¥n ƒë·∫∑c bi·ªát: ch·ªâ c·∫ßn c√≥ ƒëi·ªÉm t·ªïng k·∫øt (t·ª´ c·ªôt cu·ªëi k·ª≥)
      if (field === "diemCuoiKy" && parsedValue !== null) {
        if (parsedValue < 3 && parsedValue !== 0) {
          // ƒêi·ªÉm cu·ªëi k·ª≥ < 3 (nh∆∞ng kh√¥ng ph·∫£i 0) - kh√¥ng ƒë·∫°t
          subject.diemTongKet = null;
          subject.thangDiem4 = 0;
          subject.diemChu = "F";
          subject.xepLoai = "K√©m";
          subject.ghiChu = "CK < 3";
          subject.dat = "";
        } else if (parsedValue > 0) {
          subject.diemTongKet = parsedValue;
          subject.thangDiem4 = convertScore10To4(parsedValue);
          subject.diemChu = convertScore4ToChar(subject.thangDiem4);
          subject.xepLoai = convertScore4ToClassification(subject.thangDiem4);
          subject.ghiChu = subject.thangDiem4 !== 0 ? "" : "H·ªçc l·∫°i";
          subject.dat = subject.thangDiem4 !== 0 ? "‚úì" : "";
        } else if (parsedValue === 0) {
          // ƒêi·ªÉm cu·ªëi k·ª≥ = 0 - kh√¥ng ƒë·∫°t
          subject.diemTongKet = parsedValue;
          subject.thangDiem4 = 0;
          subject.diemChu = "F";
          subject.xepLoai = "K√©m";
          subject.ghiChu = "CK = 0";
          subject.dat = "";
        }
      } else if (field === "diemCuoiKy" && parsedValue === null) {
        // N·∫øu x√≥a ƒëi·ªÉm cu·ªëi k·ª≥, reset t·∫•t c·∫£
        subject.diemTongKet = null;
        subject.thangDiem4 = 0;
        subject.diemChu = "";
        subject.xepLoai = "";
        subject.ghiChu = "";
        subject.dat = "";
      }
    } else {
      // Logic t√≠nh ƒëi·ªÉm b√¨nh th∆∞·ªùng cho c√°c m√¥n kh√°c
      const dsDiemTK = subject.thuongXuyen.filter(
        (score) => score !== null && score !== undefined
      );
      const dsDiemTH = subject.thucHanh.filter(
        (score) => score !== null && score !== undefined
      );
      const giuaKy =
        subject.diemGiuaKy !== null && subject.diemGiuaKy !== undefined
          ? subject.diemGiuaKy
          : null;
      const cuoiKy =
        subject.diemCuoiKy !== null && subject.diemCuoiKy !== undefined
          ? subject.diemCuoiKy
          : null;

      // Ki·ªÉm tra ƒëi·ªÅu ki·ªán t√≠nh ƒëi·ªÉm d·ª±a tr√™n lo·∫°i m√¥n
      if (selectedType === "TH") {
        // M√¥n th·ª±c h√†nh - ch·ªâ c·∫ßn c√≥ √≠t nh·∫•t 1 ƒëi·ªÉm th·ª±c h√†nh
        if (dsDiemTH.length > 0) {
          const scoreData = {
            dsDiemTK: subject.thuongXuyen.map((s) =>
              s !== null && s !== undefined ? s : 0
            ),
            dsDiemTH: subject.thucHanh.map((s) =>
              s !== null && s !== undefined ? s : 0
            ),
            giuaKy: giuaKy || 0,
            cuoiKy: cuoiKy || 0,
            tinChi: subject.credits,
          };

          const result = calculateScore(scoreData, semesterIndex, subjectIndex);
          subject.diemTongKet = result.diemTongKet;
          subject.thangDiem4 = result.diemTongKet4;
          subject.diemChu = result.diemChu;
          subject.xepLoai = result.xepLoai;
          subject.ghiChu = result.ghiChu;
          subject.dat = result.isDat ? "‚úì" : "";
        } else {
          // Ch∆∞a c√≥ ƒëi·ªÉm th·ª±c h√†nh
          subject.diemTongKet = null;
          subject.thangDiem4 = null;
          subject.diemChu = "";
          subject.xepLoai = "";
          subject.ghiChu = "";
          subject.dat = "";
        }
      } else {
        // M√¥n l√Ω thuy·∫øt, m√¥n t√≠ch h·ª£p, ho·∫∑c ch∆∞a x√°c ƒë·ªãnh - c·∫ßn ƒëi·ªÉm gi·ªØa k·ª≥ v√† cu·ªëi k·ª≥
        if (giuaKy === null || giuaKy === undefined) {
          // Ch∆∞a c√≥ ƒëi·ªÉm gi·ªØa k·ª≥
          subject.diemTongKet = null;
          subject.thangDiem4 = null;
          subject.diemChu = "";
          subject.xepLoai = "";
          subject.ghiChu = "";
          subject.dat = "";
        } else if (giuaKy === 0) {
          // ƒêi·ªÉm gi·ªØa k·ª≥ = 0 (c·∫•m thi)
          subject.diemTongKet = null;
          subject.thangDiem4 = 0;
          subject.diemChu = "F";
          subject.xepLoai = "K√©m";
          subject.ghiChu = "C·∫•m thi";
          subject.dat = "";
        } else if (cuoiKy !== null && cuoiKy < 3) {
          // ƒêi·ªÉm cu·ªëi k·ª≥ < 3 - kh√¥ng ƒë·∫°t
          subject.diemTongKet = null;
          subject.thangDiem4 = 0;
          subject.diemChu = "F";
          subject.xepLoai = "K√©m";
          if (cuoiKy === 0) {
            subject.ghiChu = "CK = 0";
          } else {
            subject.ghiChu = "CK < 3";
          }
          subject.dat = "";
        } else if (dsDiemTK.length >= 2 && giuaKy !== null && cuoiKy !== null) {
          const scoreData = {
            dsDiemTK: subject.thuongXuyen.map((s) =>
              s !== null && s !== undefined ? s : 0
            ),
            dsDiemTH: subject.thucHanh.map((s) =>
              s !== null && s !== undefined ? s : 0
            ),
            giuaKy: giuaKy,
            cuoiKy: cuoiKy,
            tinChi: subject.credits,
          };

          const result = calculateScore(scoreData, semesterIndex, subjectIndex);
          subject.diemTongKet = result.diemTongKet;
          subject.thangDiem4 = result.diemTongKet4;
          subject.diemChu = result.diemChu;
          subject.xepLoai = result.xepLoai;
          subject.ghiChu = result.ghiChu;
          subject.dat = result.isDat ? "‚úì" : "";
        }
      }
    }

    // T√≠nh l·∫°i th·ªëng k√™ h·ªçc k·ª≥ cho k·ª≥ hi·ªán t·∫°i v√† t·∫•t c·∫£ c√°c k·ª≥ sau
    // (v√¨ ƒëi·ªÉm t√≠ch l≈©y s·∫Ω ·∫£nh h∆∞·ªüng ƒë·∫øn c√°c k·ª≥ sau)
    for (let i = semesterIndex; i < newGradesData.semesters.length; i++) {
      calculateSemesterSummary(
        newGradesData.semesters[i],
        i,
        newGradesData.semesters
      );
    }

    setGradesData(newGradesData);
  };

  // T√≠nh th·ªëng k√™ h·ªçc k·ª≥ m·ªü r·ªông theo CalculateScore.js
  const calculateSemesterSummary = (
    semester,
    semesterIndex = 0,
    allSemesters = []
  ) => {
    const validSubjects = semester.subjects.filter(
      (subject) =>
        !listSubjectIgnoresCalcScore.includes(
          subject.name.toLowerCase().trim()
        ) &&
        subject.diemTongKet !== null &&
        subject.diemTongKet !== undefined
    );

    // Ch·ªâ t·∫°o summary khi c√≥ √≠t nh·∫•t 1 m√¥n c√≥ ƒëi·ªÉm
    if (validSubjects.length === 0) {
      semester.summary = null;
      return;
    }

    const passedSubjects = validSubjects.filter(
      (subject) => subject.diemChu && subject.diemChu !== "F"
    );

    // T√≠nh ƒëi·ªÉm trung b√¨nh h·ªçc k·ª≥ hi·ªán t·∫°i
    const tong10HocKy = validSubjects.reduce(
      (sum, subject) => sum + subject.diemTongKet * subject.credits,
      0
    );
    const tong4HocKy = validSubjects.reduce(
      (sum, subject) => sum + subject.thangDiem4 * subject.credits,
      0
    );
    const tongTinChiHocKy = validSubjects.reduce(
      (sum, subject) => sum + subject.credits,
      0
    );
    const tongTinChiDatHocKy = passedSubjects.reduce(
      (sum, subject) => sum + subject.credits,
      0
    );

    // T·ªïng s·ªë t√≠n ch·ªâ ƒë√£ ƒëƒÉng k√Ω c·ªßa h·ªçc k·ª≥ hi·ªán t·∫°i (kh√¥ng t√≠nh m√¥n ignore)
    const tongTinChiDangKyHocKy = semester.subjects
      .filter(
        (subject) =>
          !listSubjectIgnoresCalcScore.includes(
            subject.name.toLowerCase().trim()
          )
      )
      .reduce((sum, subject) => sum + subject.credits, 0);

    // T√≠nh t·ªïng t√≠ch l≈©y t·ª´ t·∫•t c·∫£ c√°c k·ª≥ t·ª´ ƒë·∫ßu ƒë·∫øn k·ª≥ hi·ªán t·∫°i
    let tongTinChiTichLuy = 0;
    let tongTinChiDangKyTichLuy = 0;
    let tongTinChiDatTichLuy = 0;
    let tong10TichLuy = 0;
    let tong4TichLuy = 0;

    // Duy·ªát qua t·∫•t c·∫£ c√°c k·ª≥ t·ª´ ƒë·∫ßu ƒë·∫øn k·ª≥ hi·ªán t·∫°i
    for (let i = 0; i <= semesterIndex; i++) {
      const currentSemester = allSemesters[i];
      if (!currentSemester) continue;

      const currentValidSubjects = currentSemester.subjects.filter(
        (subject) =>
          !listSubjectIgnoresCalcScore.includes(
            subject.name.toLowerCase().trim()
          ) &&
          subject.diemTongKet !== null &&
          subject.diemTongKet !== undefined
      );

      const currentPassedSubjects = currentValidSubjects.filter(
        (subject) => subject.diemChu && subject.diemChu !== "F"
      );

      // C·ªông d·ªìn t√≠n ch·ªâ v√† ƒëi·ªÉm
      tongTinChiTichLuy += currentValidSubjects.reduce(
        (sum, subject) => sum + subject.credits,
        0
      );
      tongTinChiDatTichLuy += currentPassedSubjects.reduce(
        (sum, subject) => sum + subject.credits,
        0
      );
      tongTinChiDangKyTichLuy += currentSemester.subjects
        .filter(
          (subject) =>
            !listSubjectIgnoresCalcScore.includes(
              subject.name.toLowerCase().trim()
            )
        )
        .reduce((sum, subject) => sum + subject.credits, 0);

      tong10TichLuy += currentValidSubjects.reduce(
        (sum, subject) => sum + subject.diemTongKet * subject.credits,
        0
      );
      tong4TichLuy += currentValidSubjects.reduce(
        (sum, subject) => sum + subject.thangDiem4 * subject.credits,
        0
      );
    }

    semester.summary = {
      // ƒêi·ªÉm trung b√¨nh h·ªçc k·ª≥ hi·ªán t·∫°i
      diemTrungBinhHocKy10:
        tongTinChiHocKy > 0
          ? Math.round((tong10HocKy / tongTinChiHocKy) * 100) / 100
          : 0,
      diemTrungBinhHocKy4:
        tongTinChiHocKy > 0
          ? Math.round((tong4HocKy / tongTinChiHocKy) * 100) / 100
          : 0,

      // ƒêi·ªÉm trung b√¨nh t√≠ch l≈©y (t·ª´ t·∫•t c·∫£ c√°c k·ª≥)
      diemTrungBinhTichLuy10:
        tongTinChiTichLuy > 0
          ? Math.round((tong10TichLuy / tongTinChiTichLuy) * 100) / 100
          : 0,
      diemTrungBinhTichLuy4:
        tongTinChiTichLuy > 0
          ? Math.round((tong4TichLuy / tongTinChiTichLuy) * 100) / 100
          : 0,

      // T·ªïng s·ªë t√≠n ch·ªâ t√≠ch l≈©y (t·ª´ t·∫•t c·∫£ c√°c k·ª≥)
      tongTinChiDangKy: tongTinChiDangKyTichLuy,
      tongTinChiTichLuy: tongTinChiDatTichLuy,

      // T·ªïng s·ªë t√≠n ch·ªâ ƒë·∫°t (ch·ªâ t√≠nh ri√™ng cho k·ª≥ hi·ªán t·∫°i)
      tongTinChiDat: tongTinChiDatHocKy,
      tongTinChiNo: tongTinChiDangKyTichLuy - tongTinChiDatTichLuy,

      // X·∫øp lo·∫°i h·ªçc l·ª±c
      xepLoaiHocKy:
        tongTinChiHocKy > 0
          ? convertScore4ToClassificationHK(
              Math.round((tong4HocKy / tongTinChiHocKy) * 100) / 100
            )
          : "",
      xepLoaiTichLuy:
        tongTinChiTichLuy > 0
          ? convertScore4ToClassificationHK(
              Math.round((tong4TichLuy / tongTinChiTichLuy) * 100) / 100
            )
          : "",
    };
  };

  // Function to calculate final grade for a subject
  const calculateFinalGrade = (subject, semesterIndex, subjectIndex) => {
    const thuongXuyen = subject.thuongXuyen.filter(
      (score) => score !== null && score !== undefined
    );
    const thucHanh = subject.thucHanh.filter(
      (score) => score !== null && score !== undefined
    );
    const giuaKy =
      subject.diemGiuaKy !== null && subject.diemGiuaKy !== undefined
        ? subject.diemGiuaKy
        : null;
    const cuoiKy =
      subject.diemCuoiKy !== null && subject.diemCuoiKy !== undefined
        ? subject.diemCuoiKy
        : null;
    const tinChi = subject.credits || 0;

    if (giuaKy === null || cuoiKy === null) {
      return {
        diemHe10: null,
        diemHe4: null,
        diemChu: "",
        xepLoai: "",
      };
    }

    // X√°c ƒë·ªãnh lo·∫°i m√¥n t·ª´ selection th·ªß c√¥ng ho·∫∑c t·ª± ƒë·ªông
    const subjectType = getCurrentSubjectType(semesterIndex, subjectIndex);

    let diemTongKet = 0;
    const diemThuongXuyen =
      thuongXuyen.length > 0
        ? thuongXuyen.reduce((sum, score) => sum + (score || 0), 0) /
          thuongXuyen.length
        : 0;

    if (subjectType === "TH") {
      // M√¥n th·ª±c h√†nh - t√≠nh trung b√¨nh c·ªông c·ªßa c√°c ƒëi·ªÉm th·ª±c h√†nh ƒë√£ nh·∫≠p
      const validScores = thucHanh.filter(
        (score) => score !== null && score !== undefined
      );
      if (validScores.length > 0) {
        diemTongKet =
          validScores.reduce((sum, score) => sum + score, 0) /
          validScores.length;
      } else {
        return {
          diemHe10: null,
          diemHe4: null,
          diemChu: "",
          xepLoai: "",
        };
      }
    } else if (subjectType === "LT") {
      // M√¥n l√Ω thuy·∫øt - ch·ªâ d√πng c√¥ng th·ª©c l√Ω thuy·∫øt
      diemTongKet = diemThuongXuyen * 0.2 + giuaKy * 0.3 + cuoiKy * 0.5;
    } else if (subjectType === "TICH_HOP") {
      // M√¥n t√≠ch h·ª£p - k·∫øt h·ª£p l√Ω thuy·∫øt v√† th·ª±c h√†nh
      const validThucHanhScores = thucHanh.filter(
        (score) => score !== null && score !== undefined
      );
      const diemLT = diemThuongXuyen * 0.2 + giuaKy * 0.3 + cuoiKy * 0.5;

      if (validThucHanhScores.length > 0) {
        const diemThucHanh =
          validThucHanhScores.reduce((sum, score) => sum + score, 0) /
          validThucHanhScores.length;
        if (tinChi === 2) {
          // M√¥n t√≠ch h·ª£p 2 t√≠n ch·ªâ: 1 t√≠n l√Ω thuy·∫øt + 1 t√≠n th·ª±c h√†nh
          diemTongKet = (diemLT * 1 + diemThucHanh * 1) / 2;
        } else if (tinChi === 3) {
          // M√¥n t√≠ch h·ª£p 3 t√≠n ch·ªâ: 2 t√≠n l√Ω thuy·∫øt + 1 t√≠n th·ª±c h√†nh
          diemTongKet = (diemLT * 2 + diemThucHanh) / 3;
        } else {
          // M√¥n t√≠ch h·ª£p 4+ t√≠n ch·ªâ: 3 t√≠n l√Ω thuy·∫øt + 1 t√≠n th·ª±c h√†nh
          diemTongKet = (diemLT * 3 + diemThucHanh) / 4;
        }
      } else {
        // N·∫øu ch∆∞a c√≥ ƒëi·ªÉm th·ª±c h√†nh, ch·ªâ t√≠nh ph·∫ßn l√Ω thuy·∫øt
        diemTongKet = diemLT;
      }
    } else {
      // M√¥n ƒë·∫∑c bi·ªát - ch·ªâ d√πng ƒëi·ªÉm cu·ªëi k·ª≥
      diemTongKet = cuoiKy;
    }

    const diemHe4 = convertScore10To4(diemTongKet);

    return {
      diemHe10: diemTongKet,
      diemHe4: diemHe4,
      diemChu: convertScore4ToChar(diemHe4),
      xepLoai: convertScore4ToClassification(diemHe4),
    };
  };

  // Function to update score and recalculate
  const updateScore = (e, scoreType, semesterIndex, subjectIndex) => {
    const newValue = e.target.textContent.trim();

    // Validate ƒëi·ªÉm tr∆∞·ªõc khi x·ª≠ l√Ω
    const validation = validateScore(newValue);
    if (!validation.isValid) {
      // Hi·ªÉn th·ªã l·ªói tr·ª±c quan
      e.target.style.color = "#dc2626";
      e.target.style.backgroundColor = "#fef2f2";
      e.target.style.border = "1px solid #dc2626";
      e.target.title = validation.error;

      // Reset sau 3 gi√¢y
      setTimeout(() => {
        e.target.style.backgroundColor = "inherit";
        e.target.style.border = "none";
        e.target.title = "";
      }, 3000);

      return;
    }

    // Reset error styling
    e.target.style.backgroundColor = "inherit";
    e.target.style.border = "none";
    e.target.title = "";

    // Convert scoreType to field name for handleScoreChange
    let field = "";
    switch (scoreType) {
      case "gk":
        field = "diemGiuaKy";
        break;
      case "tx1":
        field = "thuongXuyen-0";
        break;
      case "tx2":
        field = "thuongXuyen-1";
        break;
      case "tx3":
        field = "thuongXuyen-2";
        break;
      case "tx4":
        field = "thuongXuyen-3";
        break;
      case "th1":
        field = "thucHanh-0";
        break;
      case "th2":
        field = "thucHanh-1";
        break;
      case "th3":
        field = "thucHanh-2";
        break;
      case "th4":
        field = "thucHanh-3";
        break;
      case "th5":
        field = "thucHanh-4";
        break;
      case "ck":
        field = "diemCuoiKy";
        break;
    }

    // Use handleScoreChange to update and recalculate
    handleScoreChange(semesterIndex, subjectIndex, field, newValue);

    // Update display with rounded value
    if (validation.value !== null) {
      const displayValue = validation.value.toFixed(1).replace(".", ",");
      e.target.textContent = displayValue;
    }

    // Update visual styling for low scores
    const numValue = validation.value;
    if (
      (numValue !== null &&
        numValue !== undefined &&
        numValue >= 0 &&
        numValue <= 5) ||
      numValue === 0
    ) {
      e.target.style.color = "#dc2626";
      e.target.style.fontWeight = "bold";
      e.target.classList.add("low-score");
    } else {
      e.target.style.color = "inherit";
      e.target.style.fontWeight = "normal";
      e.target.classList.remove("low-score");
    }
  };

  // Helper function to parse score
  const parseScore = (scoreStr) => {
    if (!scoreStr || scoreStr === "") {
      return null;
    }
    // Convert Vietnamese decimal format (8,50) to JS format (8.50)
    const normalizedStr = scoreStr.toString().replace(",", ".");
    const parsed = parseFloat(normalizedStr);
    if (isNaN(parsed)) {
      return null;
    }
    // L√†m tr√≤n ƒë·∫øn 1 ch·ªØ s·ªë th·∫≠p ph√¢n
    return Math.round(parsed * 10) / 10;
  };

  // H√†m t·∫°o √¥ input c√≥ th·ªÉ ch·ªânh s·ª≠a v·ªõi logic m√†u ƒë·ªè cho ƒëi·ªÉm ‚â§ 5
  const createEditableCell = (
    value,
    scoreType,
    semesterIndex,
    subjectIndex
  ) => {
    const subject = gradesData.semesters[semesterIndex].subjects[subjectIndex];
    const selectedType = getCurrentSubjectType(semesterIndex, subjectIndex);

    // X√°c ƒë·ªãnh c·ªôt n√†o b·ªã v√¥ hi·ªáu h√≥a d·ª±a tr√™n lo·∫°i m√¥n ƒë√£ ch·ªçn
    const isThucHanhColumn = ["th1", "th2", "th3", "th4", "th5"].includes(
      scoreType
    );
    const isLyThuyetColumn = ["gk", "tx1", "tx2", "tx3", "tx4"].includes(
      scoreType
    );

    let isDisabled = false;

    if (selectedType === "SPECIAL") {
      // M√¥n ƒë·∫∑c bi·ªát: ch·ªâ cho ph√©p nh·∫≠p c·ªôt cu·ªëi k·ª≥
      isDisabled = scoreType !== "ck";
    } else if (selectedType === "LT") {
      // M√¥n l√Ω thuy·∫øt: cho ph√©p Gi·ªØa k·ª≥, Th∆∞·ªùng xuy√™n, Cu·ªëi k·ª≥
      isDisabled = isThucHanhColumn;
    } else if (selectedType === "TH") {
      // M√¥n th·ª±c h√†nh: ch·ªâ cho ph√©p c√°c c·ªôt th·ª±c h√†nh
      isDisabled = isLyThuyetColumn || scoreType === "ck";
    } else if (
      selectedType === "TICH_HOP" ||
      selectedType === "CHUA_XAC_DINH"
    ) {
      // M√¥n t√≠ch h·ª£p ho·∫∑c ch∆∞a x√°c ƒë·ªãnh: cho ph√©p t·∫•t c·∫£ c√°c c·ªôt
      isDisabled = false;
    }
    // N·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c lo·∫°i m√¥n, cho ph√©p t·∫•t c·∫£

    // Parse value ƒë·ªÉ hi·ªÉn th·ªã ƒë√∫ng format v·ªõi 1 ch·ªØ s·ªë th·∫≠p ph√¢n
    const numericValue = parseScore(value);
    let displayValue = "";

    // Ki·ªÉm tra value m·ªôt c√°ch ch√≠nh x√°c ƒë·ªÉ kh√¥ng b·ªè qua s·ªë 0
    if (value !== null && value !== undefined && value !== "") {
      if (typeof value === "string") {
        displayValue = value;
      } else if (typeof value === "number") {
        // Hi·ªÉn th·ªã v·ªõi 1 ch·ªØ s·ªë th·∫≠p ph√¢n v√† d·∫•u ph·∫©y, bao g·ªìm c·∫£ s·ªë 0
        displayValue = value.toFixed(1).replace(".", ",");
      }
    } else if (value === 0) {
      // ƒê·∫∑c bi·ªát x·ª≠ l√Ω tr∆∞·ªùng h·ª£p value = 0
      displayValue = "0,0";
    }

    const isLowScore =
      (numericValue !== null &&
        numericValue !== undefined &&
        numericValue >= 0 &&
        numericValue <= 5) ||
      value === 0;

    return React.createElement(
      "td",
      {
        className: `${isLowScore ? "low-score" : ""} ${
          isDisabled ? "disabled-cell" : ""
        }`,
        contentEditable: !isDisabled,
        suppressContentEditableWarning: true,
        style: {
          outline: "none",
          color: isDisabled ? "#9ca3af" : isLowScore ? "#dc2626" : "inherit",
          fontWeight: isLowScore ? "bold" : "normal",
          backgroundColor: isDisabled ? "#f9fafb" : "inherit",
          cursor: isDisabled ? "not-allowed" : "text",
        },
        onBlur: (e) => {
          if (!isDisabled) {
            updateScore(e, scoreType, semesterIndex, subjectIndex);
          }
        },
        onKeyPress: (e) => {
          if (!isDisabled && e.key === "Enter") {
            e.preventDefault();
            e.target.blur();
          }
        },
        onKeyUp: (e) => {
          if (!isDisabled) {
            // Ch·ªâ cho nh·∫≠p s·ªë, d·∫•u ph·∫©y v√† d·∫•u ch·∫•m
            const regex = /^[0-9.,]*$/;
            if (!regex.test(e.target.textContent)) {
              e.target.textContent = e.target.textContent.replace(
                /[^0-9.,]/g,
                ""
              );
            }

            // C·∫≠p nh·∫≠t m√†u real-time khi nh·∫≠p
            const currentValue = e.target.textContent.trim();
            if (currentValue !== "") {
              const numValue = parseFloat(currentValue.replace(",", "."));
              if (
                (!isNaN(numValue) && numValue >= 0 && numValue <= 5) ||
                numValue === 0
              ) {
                e.target.style.color = "#dc2626";
                e.target.style.fontWeight = "bold";
                e.target.classList.add("low-score");
              } else {
                e.target.style.color = "inherit";
                e.target.style.fontWeight = "normal";
                e.target.classList.remove("low-score");
              }
            }
          }
        },
        title: isDisabled
          ? selectedType === "SPECIAL"
            ? "M√¥n ƒë·∫∑c bi·ªát - ch·ªâ nh·∫≠p ƒëi·ªÉm cu·ªëi k·ª≥"
            : selectedType === "LT" && isThucHanhColumn
            ? "M√¥n l√Ω thuy·∫øt - kh√¥ng c√≥ ƒëi·ªÉm th·ª±c h√†nh"
            : selectedType === "TH" && (isLyThuyetColumn || scoreType === "ck")
            ? "M√¥n th·ª±c h√†nh - ch·ªâ nh·∫≠p ƒëi·ªÉm th·ª±c h√†nh"
            : "√î nh·∫≠p b·ªã v√¥ hi·ªáu h√≥a"
          : "Nh·∫≠p ƒëi·ªÉm t·ª´ 0-10. ƒêi·ªÉm s·∫Ω ƒë∆∞·ª£c l√†m tr√≤n theo quy ƒë·ªãnh IUH.",
        onInput: (e) => {
          if (!isDisabled) {
            const value = e.target.textContent.trim();
            const validation = validateScore(value);

            if (value !== "" && !validation.isValid) {
              e.target.style.color = "#dc2626";
              e.target.style.backgroundColor = "#fef2f2";
              e.target.title = validation.error;
            }
            //  else {
            //     e.target.style.backgroundColor = 'inherit';
            //     e.target.title = isDisabled ?
            //         (selectedType === 'SPECIAL' ? 'M√¥n ƒë·∫∑c bi·ªát - ch·ªâ nh·∫≠p ƒëi·ªÉm cu·ªëi k·ª≥' :
            //             selectedType === 'LT' && isThucHanhColumn ? 'M√¥n l√Ω thuy·∫øt - kh√¥ng c√≥ ƒëi·ªÉm th·ª±c h√†nh' :
            //                 selectedType === 'TH' && (isLyThuyetColumn || scoreType === 'ck') ? 'M√¥n th·ª±c h√†nh - ch·ªâ nh·∫≠p ƒëi·ªÉm th·ª±c h√†nh' :
            //                     '√î nh·∫≠p b·ªã v√¥ hi·ªáu h√≥a') :
            //         'Nh·∫≠p ƒëi·ªÉm t·ª´ 0-10. ƒêi·ªÉm s·∫Ω ƒë∆∞·ª£c l√†m tr√≤n theo quy ƒë·ªãnh IUH.';
            // }
          }
        },
      },
      displayValue
    );
  };

  // Loading state
  if (isLoading) {
    return React.createElement(
      "div",
      { className: "loading" },
      React.createElement("div", { className: "spinner" }),
      React.createElement(
        "span",
        { className: "loading-text" },
        "ƒêang t·∫£i d·ªØ li·ªáu ƒëi·ªÉm..."
      )
    );
  }

  // Error state
  if (error) {
    return React.createElement(
      "div",
      { className: "error-container" },
      React.createElement("div", { className: "error-icon" }, "‚ö†Ô∏è"),
      React.createElement("div", { className: "error-message" }, error),
      React.createElement(
        "button",
        {
          className: "retry-button",
          onClick: loadGradesFromStorage,
        },
        "Th·ª≠ l·∫°i"
      )
    );
  }

  // No data state
  if (
    !gradesData ||
    !gradesData.semesters ||
    gradesData.semesters.length === 0
  ) {
    return React.createElement(
      "div",
      { className: "no-data-container" },
      React.createElement("div", { className: "no-data-icon" }, "üìä"),
      React.createElement(
        "div",
        { className: "no-data-title" },
        "Ch∆∞a c√≥ d·ªØ li·ªáu ƒëi·ªÉm"
      ),
      React.createElement(
        "div",
        { className: "no-data-text" },
        "Vui l√≤ng truy c·∫≠p trang tra c·ª©u ƒëi·ªÉm IUH ƒë·ªÉ l·∫•y d·ªØ li·ªáu"
      )
    );
  }

  // H√†m t·∫°o banner th√¥ng b√°o tr·∫°ng th√°i ch∆∞∆°ng tr√¨nh khung
  const createCurriculumStatusBanner = () => {
    const hasCurriculumData = typeof window.getCurriculumInfo === "function";

    if (hasCurriculumData) {
      return React.createElement(
        "div",
        {
          style: {
            backgroundColor: "#d4edda",
            border: "1px solid #c3e6cb",
            borderRadius: "6px",
            padding: "12px 16px",
            marginBottom: "20px",
            display: "flex",
            alignItems: "center",
            gap: "8px",
            fontSize: "14px",
            color: "#155724",
          },
        },
        React.createElement("span", { style: { fontSize: "16px" } }, "‚úÖ"),
        React.createElement(
          "span",
          null,
          "ƒê√£ t·∫£i d·ªØ li·ªáu ch∆∞∆°ng tr√¨nh khung - T·ª± ƒë·ªông ph√¢n lo·∫°i m√¥n h·ªçc ho·∫°t ƒë·ªông"
        )
      );
    } else {
      return React.createElement(
        "div",
        {
          style: {
            backgroundColor: "#fff3cd",
            border: "1px solid #ffeaa7",
            borderRadius: "6px",
            padding: "16px 20px",
            marginBottom: "20px",
            fontSize: "14px",
            color: "#856404",
          },
        },
        React.createElement(
          "div",
          {
            style: {
              display: "flex",
              alignItems: "flex-start",
              gap: "12px",
            },
          },
          React.createElement(
            "span",
            { style: { fontSize: "20px", marginTop: "2px" } },
            "‚ö†Ô∏è"
          ),
          React.createElement(
            "div",
            {
              style: {
                flex: 1,
              },
            },
            React.createElement(
              "h4",
              {
                style: {
                  margin: "0 0 8px 0",
                  fontSize: "16px",
                  fontWeight: "bold",
                  color: "#856404",
                },
              },
              "Ch∆∞a c√≥ d·ªØ li·ªáu ch∆∞∆°ng tr√¨nh khung"
            ),
            React.createElement(
              "p",
              {
                style: {
                  margin: "0 0 12px 0",
                  fontSize: "14px",
                  lineHeight: "1.4",
                  color: "#856404",
                },
              },
              'ƒê·ªÉ extension ho·∫°t ƒë·ªông t·ªët nh·∫•t v√† t·ª± ƒë·ªông ph√¢n lo·∫°i m√¥n h·ªçc, vui l√≤ng ƒëƒÉng nh·∫≠p trang sv.iuh tr∆∞·ªõc. Hi·ªán t·∫°i t·∫•t c·∫£ m√¥n h·ªçc s·∫Ω ƒë∆∞·ª£c m·∫∑c ƒë·ªãnh ph√¢n lo·∫°i l√† N/A ".'
            ),
            React.createElement(
              "div",
              {
                style: {
                  display: "flex",
                  gap: "8px",
                  marginTop: "12px",
                },
              },
              React.createElement(
                "button",
                {
                  onClick: () => {
                    window.open(
                      "https://sv.iuh.edu.vn/chuong-trinh-khung.html?auto=true",
                      "_blank"
                    );
                    // Sau 3 gi√¢y, reload trang ƒë·ªÉ ki·ªÉm tra l·∫°i
                    setTimeout(() => {
                      window.location.reload();
                    }, 3000);
                  },
                  style: {
                    backgroundColor: "#007bff",
                    color: "white",
                    border: "none",
                    borderRadius: "4px",
                    padding: "8px 16px",
                    fontSize: "13px",
                    cursor: "pointer",
                    fontWeight: "500",
                  },
                },
                "ƒêƒÉng nh·∫≠p ngay"
              ),
              React.createElement(
                "button",
                {
                  onClick: () => {
                    window.location.reload();
                  },
                  style: {
                    backgroundColor: "#28a745",
                    color: "white",
                    border: "none",
                    borderRadius: "4px",
                    padding: "8px 16px",
                    fontSize: "13px",
                    cursor: "pointer",
                    fontWeight: "500",
                  },
                },
                "L√†m m·ªõi"
              )
            )
          )
        )
      );
    }
  };

  // Main render
  return React.createElement(
    "div",
    { className: "grades-page-container" },
    // Status banner
    createCurriculumStatusBanner(),
    // Render each semester
    gradesData.semesters.map((semester, semIndex) =>
      React.createElement(
        "div",
        {
          key: `semester-${semIndex}`,
          className: "semester-container",
        },
        // Semester title
        React.createElement(
          "h3",
          { className: "semester-title" },
          semester.name
        ),

        // Main table
        React.createElement(
          "div",
          { className: "table-responsive" },
          React.createElement(
            "table",
            { className: "grades-table" },
            // Table header
            React.createElement(
              "thead",
              null,
              // Header row 1
              React.createElement(
                "tr",
                { className: "header-row-1" },
                React.createElement(
                  "th",
                  { rowSpan: 3, className: "col-stt" },
                  "STT"
                ),
                React.createElement(
                  "th",
                  { rowSpan: 3, className: "col-ma-lhp" },
                  "M√£ l·ªõp h·ªçc ph·∫ßn"
                ),
                React.createElement(
                  "th",
                  { rowSpan: 3, className: "col-ten-mon" },
                  "T√™n m√¥n h·ªçc/h·ªçc ph·∫ßn"
                ),
                React.createElement(
                  "th",
                  { rowSpan: 3, className: "col-tin-chi" },
                  "S·ªë t√≠n ch·ªâ"
                ),
                React.createElement(
                  "th",
                  { rowSpan: 3, className: "col-loai-mon" },
                  "Lo·∫°i m√¥n"
                ),
                React.createElement(
                  "th",
                  { rowSpan: 3, className: "col-giua-ky" },
                  "Gi·ªØa k·ª≥"
                ),
                React.createElement(
                  "th",
                  { colSpan: 4, className: "col-thuong-xuyen" },
                  "Th∆∞·ªùng xuy√™n"
                ),
                React.createElement(
                  "th",
                  { colSpan: 5, rowSpan: 2, className: "col-thuc-hanh" },
                  "Th·ª±c h√†nh"
                ),
                React.createElement(
                  "th",
                  { rowSpan: 3, className: "col-cuoi-ky" },
                  "Cu·ªëi k·ª≥"
                ),
                React.createElement(
                  "th",
                  { rowSpan: 3, className: "col-tong-ket" },
                  "ƒêi·ªÉm t·ªïng k·∫øt"
                ),
                React.createElement(
                  "th",
                  { rowSpan: 3, className: "col-thang-diem-4" },
                  "Thang ƒëi·ªÉm 4"
                ),
                React.createElement(
                  "th",
                  { rowSpan: 3, className: "col-diem-chu" },
                  "ƒêi·ªÉm ch·ªØ"
                ),
                React.createElement(
                  "th",
                  { rowSpan: 3, className: "col-xep-loai" },
                  "X·∫øp lo·∫°i"
                ),
                React.createElement(
                  "th",
                  { rowSpan: 3, className: "col-ghi-chu" },
                  "Ghi ch√∫"
                ),
                React.createElement(
                  "th",
                  { rowSpan: 3, className: "col-dat" },
                  "ƒê·∫°t"
                )
              ),
              // Header row 2
              React.createElement(
                "tr",
                { className: "header-row-2" },
                React.createElement(
                  "th",
                  { colSpan: 4, className: "sub-header" },
                  "LT H·ªá s·ªë 1"
                )
                // React.createElement('th', { colSpan: 5, className: 'sub-header' }, 'Th·ª±c h√†nh')
              ),
              // Header row 3
              React.createElement(
                "tr",
                { className: "header-row-3" },
                React.createElement("th", { className: "tx-col" }, "1"),
                React.createElement("th", { className: "tx-col" }, "2"),
                React.createElement("th", { className: "tx-col" }, "3"),
                React.createElement("th", { className: "tx-col" }, "4"),
                React.createElement("th", { className: "th-col" }, "1"),
                React.createElement("th", { className: "th-col" }, "2"),
                React.createElement("th", { className: "th-col" }, "3"),
                React.createElement("th", { className: "th-col" }, "4"),
                React.createElement("th", { className: "th-col" }, "5")
              )
            ),

            // Table body
            React.createElement(
              "tbody",
              null,
              semester.subjects.map((subject, subIndex) =>
                React.createElement(
                  "tr",
                  {
                    key: `subject-${semIndex}-${subIndex}`,
                    className: "subject-row",
                  },
                  React.createElement(
                    "td",
                    { className: "td-stt" },
                    subject.stt
                  ),
                  React.createElement(
                    "td",
                    { className: "td-ma-lhp" },
                    subject.maLhp
                  ),
                  React.createElement(
                    "td",
                    { className: "td-ten-mon" },
                    subject.name
                  ),
                  React.createElement(
                    "td",
                    { className: "td-tin-chi" },
                    subject.credits
                  ),
                  createSubjectTypeSelector(semIndex, subIndex),
                  createEditableCell(
                    subject.diemGiuaKy,
                    "gk",
                    semIndex,
                    subIndex
                  ),
                  // Th∆∞·ªùng xuy√™n columns (4) - editable
                  createEditableCell(
                    subject.thuongXuyen[0],
                    "tx1",
                    semIndex,
                    subIndex
                  ),
                  createEditableCell(
                    subject.thuongXuyen[1],
                    "tx2",
                    semIndex,
                    subIndex
                  ),
                  createEditableCell(
                    subject.thuongXuyen[2],
                    "tx3",
                    semIndex,
                    subIndex
                  ),
                  createEditableCell(
                    subject.thuongXuyen[3],
                    "tx4",
                    semIndex,
                    subIndex
                  ),
                  // Th·ª±c h√†nh columns (5) - editable
                  createEditableCell(
                    subject.thucHanh[0],
                    "th1",
                    semIndex,
                    subIndex
                  ),
                  createEditableCell(
                    subject.thucHanh[1],
                    "th2",
                    semIndex,
                    subIndex
                  ),
                  createEditableCell(
                    subject.thucHanh[2],
                    "th3",
                    semIndex,
                    subIndex
                  ),
                  createEditableCell(
                    subject.thucHanh[3],
                    "th4",
                    semIndex,
                    subIndex
                  ),
                  createEditableCell(
                    subject.thucHanh[4],
                    "th5",
                    semIndex,
                    subIndex
                  ),
                  createEditableCell(
                    subject.diemCuoiKy,
                    "ck",
                    semIndex,
                    subIndex
                  ),
                  React.createElement(
                    "td",
                    {
                      className: `td-tong-ket ${getGradeClass(
                        subject.diemTongKet
                      )}`,
                      style:
                        (subject.diemTongKet !== null &&
                          subject.diemTongKet !== undefined &&
                          subject.diemTongKet >= 0 &&
                          subject.diemTongKet <= 5) ||
                        subject.diemTongKet === 0
                          ? { color: "#dc2626", fontWeight: "bold" }
                          : {},
                    },
                    subject.diemTongKet !== null &&
                      subject.diemTongKet !== undefined
                      ? typeof subject.diemTongKet === "string"
                        ? subject.diemTongKet
                        : subject.diemTongKet.toFixed(1).replace(".", ",")
                      : ""
                  ),
                  React.createElement(
                    "td",
                    { className: "td-thang-diem-4" },
                    subject.thangDiem4 !== null &&
                      subject.thangDiem4 !== undefined
                      ? subject.thangDiem4.toFixed(1).replace(".", ",")
                      : ""
                  ),
                  React.createElement(
                    "td",
                    { className: "td-diem-chu" },
                    subject.diemChu || ""
                  ),
                  React.createElement(
                    "td",
                    { className: "td-xep-loai" },
                    subject.xepLoai || ""
                  ),
                  React.createElement(
                    "td",
                    { className: "td-ghi-chu" },
                    subject.ghiChu || ""
                  ),
                  React.createElement(
                    "td",
                    { className: "td-dat" },
                    subject.dat || ""
                  )
                )
              )
            )
          )
        ),

        // Extended Semester Summary Table - ch·ªâ hi·ªÉn th·ªã khi c√≥ ƒëi·ªÉm t·ªïng k·∫øt
        semester.summary &&
          semester.subjects.some(
            (subject) =>
              subject.diemTongKet !== null && subject.diemTongKet !== undefined
          ) &&
          React.createElement(
            "div",
            { className: "semester-summary-table" },
            React.createElement(
              "table",
              { className: "summary-table" },
              React.createElement(
                "tbody",
                null,
                // ƒêi·ªÉm trung b√¨nh h·ªçc k·ª≥
                React.createElement(
                  "tr",
                  { className: "summary-row" },
                  React.createElement(
                    "td",
                    { className: "summary-label", colSpan: 2 },
                    `ƒêi·ªÉm trung b√¨nh h·ªçc k·ª≥ h·ªá 10: ${semester.summary.diemTrungBinhHocKy10
                      .toFixed(2)
                      .replace(".", ",")}`
                  ),
                  React.createElement(
                    "td",
                    { className: "summary-label", colSpan: 2 },
                    `ƒêi·ªÉm trung b√¨nh h·ªçc k·ª≥ h·ªá 4: ${semester.summary.diemTrungBinhHocKy4
                      .toFixed(2)
                      .replace(".", ",")}`
                  )
                ),

                // ƒêi·ªÉm trung b√¨nh t√≠ch l≈©y
                React.createElement(
                  "tr",
                  { className: "summary-row" },
                  React.createElement(
                    "td",
                    { className: "summary-label", colSpan: 2 },
                    `ƒêi·ªÉm trung b√¨nh t√≠ch l≈©y h·ªá 10: ${semester.summary.diemTrungBinhTichLuy10
                      .toFixed(2)
                      .replace(".", ",")}`
                  ),
                  React.createElement(
                    "td",
                    { className: "summary-label", colSpan: 2 },
                    `ƒêi·ªÉm trung b√¨nh t√≠ch l≈©y h·ªá 4: ${semester.summary.diemTrungBinhTichLuy4
                      .toFixed(2)
                      .replace(".", ",")}`
                  )
                ),

                // T·ªïng s·ªë t√≠n ch·ªâ
                React.createElement(
                  "tr",
                  { className: "summary-row" },
                  React.createElement(
                    "td",
                    { className: "summary-label", colSpan: 2 },
                    `T·ªïng s·ªë t√≠n ch·ªâ ƒë√£ ƒëƒÉng k√Ω: ${semester.summary.tongTinChiDangKy}`
                  ),
                  React.createElement(
                    "td",
                    { className: "summary-label", colSpan: 2 },
                    `T·ªïng s·ªë t√≠n ch·ªâ t√≠ch l≈©y: ${semester.summary.tongTinChiTichLuy}`
                  )
                ),

                // T·ªïng s·ªë t√≠n ch·ªâ ƒë·∫°t v√† n·ª£
                React.createElement(
                  "tr",
                  { className: "summary-row" },
                  React.createElement(
                    "td",
                    { className: "summary-label", colSpan: 2 },
                    `T·ªïng s·ªë t√≠n ch·ªâ ƒë·∫°t: ${semester.summary.tongTinChiDat}`
                  ),
                  React.createElement(
                    "td",
                    { className: "summary-label", colSpan: 2 },
                    `T·ªïng s·ªë t√≠n ch·ªâ n·ª£ t√≠nh ƒë·∫øn hi·ªán t·∫°i: ${semester.summary.tongTinChiNo}`
                  )
                ),

                // X·∫øp lo·∫°i h·ªçc l·ª±c
                React.createElement(
                  "tr",
                  { className: "summary-row" },
                  React.createElement(
                    "td",
                    { className: "summary-label", colSpan: 2 },
                    `X·∫øp lo·∫°i h·ªçc l·ª±c t√≠ch l≈©y: ${semester.summary.xepLoaiTichLuy}`
                  ),
                  React.createElement(
                    "td",
                    { className: "summary-label", colSpan: 2 },
                    `X·∫øp lo·∫°i h·ªçc l·ª±c h·ªçc k·ª≥: ${semester.summary.xepLoaiHocKy}`
                  )
                )
              )
            )
          )
      )
    )
  );

  // Helper function for grade coloring
  function getGradeClass(grade) {
    if (!grade) return "";
    if (grade >= 9.0) return "excellent";
    if (grade >= 8.0) return "good";
    if (grade >= 6.5) return "average";
    return "poor";
  }
}
